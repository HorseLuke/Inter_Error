$Id: 0Intro_Error_PHP4_CHINESE.txt 166 2011-02-26 09:28:00Z horseluke@126.com $


<?php
//Inter_Error_PHP4.php文件可单独使用。PHP版本要求：>=4.3.0 & <5.0.0。PHP5及以上的的请使用Inter_Error类（Error.php）
//使用方法（代码示例）：
require_once("Inter_Error_PHP4.php");     //在适当的地方以require / require_once正确引用该文件
//然后接管PHP的错误处理机制
set_error_handler('Inter_Error_PHP4_error_handler');
//然后可选择地使用如下方式进行设置（假如保持默认值，可以不需配置。默认值请查看Inter_Error_PHP4_config函数里面关于静态变量$conf的说明）：
Inter_Error_PHP4_config('debugMode', true);
//Inter_Error_PHP4_config('logType', 'simple');
//Inter_Error_PHP4_config('logDir', dirname(__FILE__).'/Log' );
//针对国内通用程序面向过程编写、比较容易出现E_NOTICE错误的实际情形（比如Discuz!、PHPWind等），可以考虑屏蔽E_NOTICE错误，避免过多的错误调试记录产生。
//请将指定的常量以数组传入。可传入的常量，请自行查找：PHP手册 -> 影响PHP行为的扩展 -> Error Handling -> 预定义常量。http://docs.php.net/manual/zh/errorfunc.constants.php
//Inter_Error_PHP4_config('ignoreERROR', array(E_NOTICE));

//可引起错误的代码，这时候就会调出Inter_Error_PHP4函数组来处理了
$variable1 = '1111';

function a(){
    b();
}

function b(){
    echo $k;
    echo 1/0;
}

function c(){
	trigger_error('FATAL ERROR!', 256);
	echo '99999999999999999999999999999999999999999999999';
}

class kkk{
	function kk(){
		echo 1/0;
		//有时候你想知道方法kk是什么时候和怎样被调用的。这时候只需要用trigger_error，就可以在页面的最后完整的查看整个调用过程了。
		trigger_error('method kk is running~', E_USER_WARNING);
	}
	
}

a();
$d = new kkk();
$d->kk();
c();

//假如代码没有错误，但是你又想看看一些变量值。那么就可以设置好Inter_Error_PHP4_config('variables', array(xxxxxxxxxx, xxxxxx, ...))，然后调用Inter_Error_PHP4_show_variables()，以显示变量。
//注意：一旦有php代码出错，此函数会自动调用
/*
//以数组加入要检测的变量名即可。
Inter_Error_PHP4_config('variables', array("_GET", "_POST", "_SESSION", "_COOKIE", "variable1", "variable2") )
echo '<hr />';
Inter_Error_PHP4_show_variables();
echo '<hr />';
*/